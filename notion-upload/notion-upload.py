"""
Purpose

Uploads audio-notion recording to Notion page.
"""

import requests
import json
import os
token = os.getenv("NOTION_TOKEN")

def upload(s3_url, page_id):
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"

    payload = json.dumps({
    "children": [
        {
        "object": "block",
        "type": "heading_2",
        "heading_2": {
            "rich_text": [
            {
                "type": "text",
                "text": {
                "content": "AudioNotion"
                }
            }
            ]
        }
        },
        {
        "object": "block",
        "type": "callout",
        "callout": {
            "children": [
            {
                "object": "block",
                "type": "file",
                "file": {
                    "type": "external",
                    "external": {
                        "url": s3_url
                    }
                }
            }
            ],
            "rich_text": [
            {
                "type": "text",
                "text": {
                "content": "Click below to access your recording!"
                }
            }
            ]
        }
        },
        {
        "object": "block",
        "type": "paragraph",
        "paragraph": {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": "Text-to-Speech of your Notion page generated by AudioNotion.",
                        "link": {
                            "url": "https://www.audio.notion"
                        }
                    }
                }
            ]
        }
        }
    ]
    })
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
        'Notion-Version': '2022-02-22'
    }

    response = requests.request("PATCH", url, headers=headers, data=payload)

    return(response.text)

def lambda_handler(event, context):
    """
    Accepts an action and a number, performs the specified action on the number,
    and returns the result.

    :param event: The event dict that contains the parameters sent when the function
                  is invoked.
    :param context: The context in which the function is called.
    :return: The result of the specified action.
    """
    logger.info('Event: %s', event)
    result = upload(event['url'], event['page_id'])

    logger.info('Upload result: %s', result)

    response = {'result': result}
    return response
